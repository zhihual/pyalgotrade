# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2014, Gabriel Martín Becedillas Ruiz
# This file is distributed under the same license as the PyAlgoTrade
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyAlgoTrade 0.18\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-09-13 15:35+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../bitstamp_ref.rst:2
msgid "bitstamp -- Bitstamp reference"
msgstr ""

#: ../../bitstamp_ref.rst:5
msgid "WebSocket"
msgstr ""

#: ../../bitstamp_ref.rst:7
msgid ""
"This package has classes for the events emitted by Bitstamp's streaming "
"service. Check https://www.bitstamp.net/websocket/ for more information."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.OrderBookUpdate:1
#: pyalgotrade.bitstamp.wsclient.Trade:1
msgid "基类：:class:`pyalgotrade.websocket.pusher.Event`"
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.OrderBookUpdate:1
msgid "An order book update event."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.OrderBookUpdate.getAskPrices:1
msgid "Returns a list with the top 20 ask prices."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.OrderBookUpdate.getAskVolumes:1
msgid "Returns a list with the top 20 ask volumes."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.OrderBookUpdate.getBidPrices:1
msgid "Returns a list with the top 20 bid prices."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.OrderBookUpdate.getBidVolumes:1
msgid "Returns a list with the top 20 bid volumes."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.OrderBookUpdate.getDateTime:1
#: pyalgotrade.bitstamp.wsclient.Trade.getDateTime:1
msgid "Returns the :class:`datetime.datetime` when this event was received."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.Trade:1
msgid "A trade event."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.Trade.getAmount:1
msgid "Returns the trade amount."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.Trade.getId:1
msgid "Returns the trade id."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.Trade.getPrice:1
msgid "Returns the trade price."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.Trade.isBuy:1
msgid "Returns True if the trade was a buy."
msgstr ""

#: of pyalgotrade.bitstamp.wsclient.Trade.isSell:1
msgid "Returns True if the trade was a sell."
msgstr ""

#: ../../bitstamp_ref.rst:15
msgid "Feeds"
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed:1
msgid "基类：:class:`pyalgotrade.barfeed.BaseBarFeed`"
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed:1
msgid "A real-time BarFeed that builds bars from live trades."
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed:3
msgid ""
"The maximum number of values that the "
":class:`pyalgotrade.dataseries.bards.BarDataSeries` will hold. Once a "
"bounded length is full, when new items are added, a corresponding number "
"of items are discarded from the opposite end. If None then "
"dataseries.DEFAULT_MAX_LEN is used."
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed:9
msgid ""
"Note that a Bar will be created for every trade, so open, high, low and "
"close values will all be the same."
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed.getOrderBookUpdateEvent:1
msgid "Returns the event that will be emitted when the orderbook gets updated."
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed.getOrderBookUpdateEvent:4
msgid "Eventh handlers should receive one parameter:"
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed.getOrderBookUpdateEvent:4
msgid "A :class:`pyalgotrade.bitstamp.wsclient.OrderBookUpdate` instance."
msgstr ""

#: of pyalgotrade.bitstamp.barfeed.LiveTradeFeed.getOrderBookUpdateEvent:6
msgid ":class:`pyalgotrade.observer.Event`."
msgstr ""

#: ../../bitstamp_ref.rst:22
msgid "Brokers"
msgstr ""

#: of pyalgotrade.bitstamp.broker.PaperTradingBroker:1
msgid "基类：:class:`pyalgotrade.bitstamp.broker.BacktestingBroker`"
msgstr ""

#: of pyalgotrade.bitstamp.broker.PaperTradingBroker:1
msgid "A Bitstamp paper trading broker."
msgstr ""

#: of pyalgotrade.bitstamp.broker.PaperTradingBroker:3
msgid "The initial amount of cash."
msgstr ""

#: of pyalgotrade.bitstamp.broker.PaperTradingBroker:5
msgid "The bar feed that will provide the bars."
msgstr ""

#: of pyalgotrade.bitstamp.broker.PaperTradingBroker:7
msgid "The fee percentage for each order. Defaults to 0.5%."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:12
#: pyalgotrade.bitstamp.broker.PaperTradingBroker:11
msgid "Only limit orders are supported."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:13
#: pyalgotrade.bitstamp.broker.PaperTradingBroker:12
msgid ""
"Orders are automatically set as **goodTillCanceled=True** and  "
"**allOrNone=False**."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:14
#: pyalgotrade.bitstamp.broker.PaperTradingBroker:13
msgid "BUY_TO_COVER orders are mapped to BUY orders."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:15
#: pyalgotrade.bitstamp.broker.PaperTradingBroker:14
msgid "SELL_SHORT orders are mapped to SELL orders."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:1
msgid "基类：:class:`pyalgotrade.broker.Broker`"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:1
msgid "A Bitstamp live broker."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:3
msgid "Client id."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:5
msgid "API key."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:7
msgid "API secret."
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:16
msgid "API access permissions should include:"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:18
msgid "Account balance"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:19
msgid "Open orders"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:20
msgid "Buy limit order"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:21
msgid "User transactions"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:22
msgid "Cancel order"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker:23
msgid "Sell limit order"
msgstr ""

#: of pyalgotrade.bitstamp.broker.LiveBroker.refreshAccountBalance:1
msgid "Refreshes cash and BTC balance."
msgstr ""

